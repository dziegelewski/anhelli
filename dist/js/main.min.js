'use strict';

var VAR = {
	fps: 60,
	W: 900,
	H: 600,
	rand: function rand(min, max) {
		return Math.floor(Math.random() * max) + min;
	},
	randRGB: function randRGB() {
		var darkest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
		var brightest = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 255;

		return 'rgb(' + VAR.rand(darkest, brightest) + ',' + VAR.rand(darkest, brightest) + ',' + VAR.rand(darkest, brightest) + ')';
	},
	groundThickness: 50,
	groundColor: 'black',
	living: []
};
var Man = function Man() {
	var height = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 60;
	var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 20;
	var speed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5;
	var color = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : VAR.randRGB(0, 90);
	var direction = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;

	this.height = height;
	this.width = width;
	this.speed = speed;
	this.color = color;
	this.direction = direction;
	this.isMoving = true;
	// 
	this.born = function (x) {
		var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : VAR.H - VAR.groundThickness;

		VAR.living.push(this);
		this.x = x;
		this.y = y - this.height;
	};
	// 
	this.render = function () {
		if (this.isMoving) {
			this.move();
		}
		ctx.fillStyle = this.color;
		ctx.fillRect(this.x, this.y - this.overGround, this.width, this.height);
	};
	// 
	this.move = function () {
		if (this.x >= VAR.W - this.width - this.speed / 2 && this.direction === 1 || this.x <= this.speed / 2 && this.direction === -1) {
			this.direction *= -1;
		}
		this.x += this.speed * this.direction;
		this.moveY();
	};
	this.moveY = function () {
		if (this.isJumping === true) {
			var distanceUp = (this.jumpHeight - this.overGround) / 12 + 1;
			this.overGround += distanceUp;
			if (this.overGround >= this.jumpHeight) {
				this.isJumping = false;
			}
		} else if (this.overGround !== 0) {
			if (this.overGround > 0) {
				if (this.falling < 20) {
					this.falling = this.falling + 0.4 * 2;
				}
				this.overGround -= this.falling;
			} else {
				this.overGround = 0;
				this.falling = 0;
			}
		}
	};

	//

	this.overGround = 0;
	this.jumpHeight = VAR.rand(50, 200);
	this.falling = 0;

	this.jump = function () {
		if (!this.isJumping && this.overGround <= 0) {
			this.isJumping = true;
		}
	};
};

var Hero = new Man(60, 20, 13, 'lightseagreen');;
Hero.jumpHeight = 30;
Hero.keyUse = function (e) {
	if (e.which === 37 || e.which === 39 || e.which === 32) {
		e.preventDefault();
		Hero['key_' + e.which] = e.type === 'keydown' ? true : false;
		if (e.which === 32) {
			Hero.jump();
		}
	}
};
Hero.move = function () {
	if (this.key_37 === true) {
		if (this.x <= this.speed / 2) {
			return false;
		}
		this.x -= this.speed;
	}
	if (this.key_39 === true) {
		if (this.x >= VAR.W - this.width - this.speed / 2) {
			return false;
		}
		this.x += this.speed;
	}
	Hero.moveY();
};

var canvas = document.createElement('canvas');
canvas.width = VAR.W;
canvas.height = VAR.H;
var ctx = canvas.getContext('2d');
document.body.appendChild(canvas);

Hero.born(VAR.rand(0, VAR.W));

var monsters = 2;

for (var i = 1; i < monsters + 1; i++) {
	var strength = VAR.rand(0, 20) + 4;
	VAR.living[i] = new Man(strength * 10, strength * 4, Math.floor(strength / 2));
	VAR.living[i].born(VAR.rand(0, VAR.W));
}

var drawGround = function drawGround() {
	var horizontal = VAR.H - VAR.groundThickness;
	ctx.beginPath();
	ctx.moveTo(0, horizontal);
	ctx.lineTo(VAR.W, horizontal);
	ctx.strokeStyle = VAR.groundColor;
	ctx.lineWidth = 3;
	ctx.stroke();
};

var animationLoop = function animationLoop() {
	ctx.clearRect(0, 0, VAR.W, VAR.H);
	requestAnimationFrame(animationLoop);
	for (var i = 0, length = VAR.living.length; i < length; i++) {
		VAR.living[i].render();
	}
	drawGround();
};
animationLoop();

var init = function init() {
	window.addEventListener('keydown', Hero.keyUse, false);
	window.addEventListener('keyup', Hero.keyUse, false);

	setInterval(function () {
		VAR.living[VAR.rand(1, monsters)].jump();
	}, 1000);
};
init();